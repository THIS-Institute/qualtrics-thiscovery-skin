/* define official THIS colours */
:root {
    --thisco-dark-grey: rgb(58 60 66 / 1);
    --thisco-light-grey: rgb(210 212 211 / 1);
    --thisco-red: rgb(221, 0, 49);
    --thisco-bright-blue: rgb(91, 194, 231);
    --thisco-pale-blue: rgb(143, 172, 217);
    --thisco-green: rgb(0, 187, 126);
    --thisco-pink: rgb(243, 165, 185);
    --thisco-aubergine: rgb(104 4 54 / 1);
    --thisco-yellow: rgb(255 216 90 / 1);
    --thisco-lighter-grey: #f4f4f4;
}

// A map of breakpoints.
$breakpoints: (
  xs: 481px,
  sm: 768px,
  md: 980px,
  lg: 1400px
);

//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {

    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {
  
      // Get the breakpoint value.
      $breakpoint-value: map-get($breakpoints, $breakpoint);
  
      // Write the media query.
      @media (min-width: $breakpoint-value) {
        @content;
      }
    
    // If the breakpoint doesn't exist in the map.
    } @else {
  
      // Log a warning.
      @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}

dialog {
    // hide actual element
    visibility: hidden;
}

 .dialog-container,
 .dialog-overlay {
   position: fixed; 
   top: 0; 
   right: 0; 
   bottom: 0; 
   left: 0; 
 }
 
 .dialog-container {
   z-index: 2; 
   display: flex;
   padding: 2rem;
   padding-top: clamp(100px, 2rem, 5rem); // to make sure clear of header
 }
 
 .dialog-container[aria-hidden='true'] {
   display: none; 
 }
 
 .dialog-overlay {
   background-color: rgba(43, 46, 56, 0.9); 
 }
 
 .dialog-content {
   margin: auto; 
   z-index: 2; 
   position: relative; 
   background-color: white;
   border-radius: 25px;
   box-shadow: 0px 0px 5px rgb(0 0 0 / 0.3);
   max-width: 92%;
   @include respond-above(sm) {
        max-width: 620px;
    }
    @include respond-above(md) {
        max-width: 820px;
    }
    .dialog-header {
        padding : 1rem;
        border-bottom: 1px solid var(--thisco-light-grey);
        display: flex;
        justify-content: flex-end;
    }
    .dialog-body {
        padding: 1.25rem 1rem;
        overflow-y: scroll;
        @include respond-above(sm) {
          padding: 1.75rem 1.5rem;
        }
        > * {
            margin-bottom: .6em;
        }
    }
 }

 // close-dialog-button is in buttons.scss

 @keyframes fade-in {
    from {
      opacity: 0;
    }
  }
  
  @keyframes slide-up {
    from {
      transform: translateY(10%);
    }
  }
  
  .dialog-overlay {
    animation: fade-in 150ms both;
  }
  
  /**
   * 1. Add an animation delay equal to the overlay animation duration to
   *    wait for the overlay to appear before animation in the dialog.
   */
  .dialog-content {
    animation: fade-in 300ms 150ms both, slide-up 300ms 150ms both; /* 1 */
  }