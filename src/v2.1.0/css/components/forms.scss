/* Qualtrics compensatory styling */

/*

Qualtrics codes:
    MC = Multiple Choice?

*/

/* radio buttons */

@mixin thiscovery-radio-button ($size) {
    color : var(--thisco-red);
    border-radius: 50%; // round
    width: $size;
    height: $size;
    // background-color: white;
    background-image: radial-gradient(circle at center, var(--thisco-red) 0%, var(--thisco-red) 50%, transparent 50%);
    // background-image: radial-gradient(circle at center, red, green) !important;
    background-position: center ;
    background-size: 0% 0%;
    background-repeat: no-repeat ;
    border: ($size * .3) solid white;
    // Safari does not support round outlines, so using box-shadow trick here
    box-shadow: 0px 0px 0px ($size * .2) var(--thisco-red);
    display: block;
    transition: all .25s;
    box-sizing: content-box;
}

@mixin thiscovery-radio-button-checked () {
    // background-color: var(--thisco-red) !important; // Q forces hand
    background-color: transparent ;
    background-size: 200% 200% ;
}

@mixin thisco-input () {
    // generic style for majority of types, override as necessary
    border-radius: 5px;
    border: 1px solid var(--thisco-light-grey);
    box-shadow: inset 1px 1px 1px rgb(0 0 0 / 0.05);
    font-weight: 400;
    padding-left: .2em;
    padding-right: .2em;
    &:focus-visible {
        border-color: var(--thisco-red);
        box-shadow: 0px 0px 0px 1px var(--thisco-red);
        outline: none;
    }
}

$min-response-height: 2.6rem;
$radio-size: .6em;

/* basic question here for building on */

.Skin {

    #SkinContent {
        padding: 1rem;
    }

    .QuestionText, .QuestionBody {
        padding: 1rem;
        padding-top: 0;
    }

    .ChoiceStructure {
        padding-left: 1rem;
        padding-right: 1rem;
        li {
            // hide native - Q js handles events, clicks on whole li element *NOT* label as per standards
            min-height: $min-response-height;
            border-radius: 15px;
            // box-shadow: inset .5px .5px 0px rgb(0 0 0 / .05);
            background-color: rgb(0 0 0 / 0.01);
            background-image: linear-gradient(45deg, transparent, rgb(0 0 0 / 0.005));
            padding: .4rem .8rem;
            margin-bottom: .6em;
            display: flex;
            transition: box-shadow .2s;
            &:hover {
                box-shadow: 1px 1px 5px rgb(0 0 0 / 0.1);
            }
            input[type="radio"], input[type="checkbox"] {
                width: 4px;
                height: 4px;
                opacity: 0;
                & + label {
                    display: none;
                }
                position: absolute;
            }
            .LabelWrapper {
                margin-left: 1rem;
                label.MultipleAnswer, label.SingleAnswer {
                    padding: 5px;
                    > span {
                        position: relative;
                        &:focus-visible {
                            outline: none;
                            &::before {
                                transform: scale(1.1);
                            }
                        }
                        &:active {
                            &::before {
                                transform: scale(0.9);
                            }
                        }
                    }

                    > span::before {
                        content: " ";
                        position: absolute;
                        left: -$radio-size * 2.4;
                        top:($radio-size * 0);
                        margin-top: 0;
                        @include thiscovery-radio-button($radio-size);
                    }
                    &.q-checked, &.q-checked.q-focused {
                        > span::before {
                            animation: none;
                            box-shadow: none;
                            @include thiscovery-radio-button($radio-size);
                            @include thiscovery-radio-button-checked();           
                        }
                    }
                }
                label.MultipleAnswer {
                    > span::before {
                        border-radius: 0px;
                    }
                    &.q-checked, &.q-checked.q-focused {
                        > span::before {
                            border-radius: 0px;
                            background-color: var(--thisco-red);
                            background-image: url("data:image/svg+xml,%3Csvg width='100%25' height='100%25' viewBox='0 0 24 20' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' xml:space='preserve' xmlns:serif='http://www.serif.com/' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;'%3E%3Cpath id='check' d='M23.051,2.843l-14.151,15.977c-0.19,0.214 -0.463,0.337 -0.749,0.337c-0.275,0 -0.538,-0.113 -0.727,-0.313l-7.152,-7.573c-0.341,-0.361 -0.364,-0.924 -0.054,-1.311l0.952,-1.19c0.293,-0.367 0.808,-0.48 1.228,-0.27l5.277,2.639l12.797,-10.902c0.395,-0.336 0.989,-0.312 1.356,0.055l1.181,1.181c0.372,0.372 0.39,0.977 0.042,1.37Z' style='fill:%23fff;fill-rule:nonzero;'/%3E%3C/svg%3E");
                            background-size: 110%;
                            border-color: transparent;
                        }
                    }
                }
                input.TextEntryBox {
                    // margin-left: 5px;
                    // margin-bottom: .4em;
                }
            }
            input:not(:checked) ~ span {
                input {
                    color:rgb(0 0 0 / 0.3);
                }
            }
        }
    }

    input {
        @include thisco-input();
    }

}